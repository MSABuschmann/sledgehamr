#include <iostream>

#include <AMReX.H>
#include <AMReX_ParmParse.H>
#include <AMReX_Print.H>

#include <SledgeHAMR_Init.H>
#include <Projects.H>

SledgeHAMR_Init::SledgeHAMR_Init ()
{
	DetermineProjectName ();
	FinishAMReXSetup ();
}

SledgeHAMR* SledgeHAMR_Init::CreateInstance()
{
	// Call MACRO generated by 'make'. Will create and return new instance
	// of derived project class corresponding to the requested project name.
	// Will do nothing if no matching project class found.
	// Implicit cast to base upon return.
	SLEDGEHAMR_PROJECT(project_name);
	amrex::Print() << "Project not found!" << std::endl;
	return NULL;
}

void SledgeHAMR_Init::DetermineProjectName ()
{
	amrex::ParmParse pp("project");
	pp.get("name",project_name);
}

void SledgeHAMR_Init::FinishAMReXSetup ()
{
	// Determine requested grid size. Divide by two if a
	// shadow level is requested and set `amr.n_cell`
	// accordingly for amrex::AmrCore.
	int grid_size = 0;
	bool shadow_hierarchy = false;

	amrex::ParmParse pp("amr");
	pp.get("coarse_level_grid_size", grid_size);
	pp.get("shadow_hierarchy", shadow_hierarchy);

	if( shadow_hierarchy )
		grid_size /= 2;

	std::vector<int> vect(3,grid_size);
	pp.addarr("n_cell", vect);

	// Determine maximum number of levels.
	int max_refinement_levels = 0;
	pp.get("max_refinement_levels", max_refinement_levels);

	int max_level = max_refinement_levels + shadow_hierarchy;
	pp.add("max_level", max_level);
}
